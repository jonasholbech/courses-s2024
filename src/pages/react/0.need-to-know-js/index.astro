---
import SlideLayout from "../../../layouts/SlideLayout.astro";
import SlideControls from "../../../components/SlideControls.astro";
import Goal from "../../../components/Goal.astro";
import codeFetcher from "../../../js/codeFetcher";
import Code from "../../../components/Code.astro";

const snippets = await codeFetcher("react/0.need-to-know-js", [
  "arrowfunctions.js",
  "arrowfunctionsforeach.js",
  "CrazyButtons.js",
  "implicitreturn.js",
  "map.js",
  "ternary.js",
  "arrowfunctionsStep1.js",
  "arrowfunctionsStep2.js",
  "arrowfunctionsStep3.js",
  "arrowfunctionsStep4.js",
  "arrowfunctionsStep5.js",
  "spreadCopyObject.js",
  "spreadCopyObject2.js",
  "destructuring-objects.js",
  "destructuring-arrays.js",
  "class1.js",
  "ex/ternary.js",
  "ex/arrowfunctions.js",
  "ex/arrowfunctionsForeach.js",
  "ex/mapping.js",
  "ex/spread-array.js",
  "ex/spread-object.js",
  "ex/destructure-parameters.js",
  "ex/destructure-arrays.js",
]);
/*
TODO:
const name ="x"
const newObj = {
  name
}
optional?.chaining
function X = (){}
X.Header = function(){}

<X.Header />
*/
---

<SlideLayout title="Introduction">
  <section>
    <h1>React</h1>
    <img src="/assets/react/0.need-to-know-js/react.png" alt="" />
  </section>
  <section>
    <h2>Introduction to the theme</h2>
    <ol>
      <li>
        The week plan<br />
        <span class="fragment">Can we try GitHub?</span>
      </li>
      <!-- <li>First time</li> -->
      <li>The goal</li>
      <li>What should we build?</li>
    </ol>
  </section>
  <Goal>
    <p>
      Be able to <span class="fragment highlight-blue">recognize</span> common, modern
      JS features and <span class="fragment highlight-blue">try them out</span>
    </p>
  </Goal>
  <section>
    <h3>Agenda</h3>
    <ul>
      <li>Crazy Buttons</li>
      <li>Vanilla JS, need to know stuff</li>
    </ul>
  </section>

  <section>
    <section>
      <h1>Crazy Buttons</h1>
      <ol>
        <li>Challenge</li>
        <li>Vanilla</li>
        <li>React</li>
      </ol>
    </section>
    <section>
      <h2>Challenge</h2>
      <h3>How would you implement this</h3>
      <video src="/assets/react/0.need-to-know-js/buttons.mov" controls></video>
    </section>
    <section>
      <p>Vanilla</p>
    </section>
    <section>
      <p>React</p>
      <Code
        code={snippets["CrazyButtons.js"]}
        language="js"
        lineNumbers="1-100|3-16|18-24|11-12|18-24"
      />
    </section>
  </section>

  <section>
    <section>
      <h6>A little JS before we're ready</h6>
      <ol>
        <li>Ternary operator</li>
        <li>Arrow functions</li>
        <li>Array.prototype.map</li>
        <li>Spread operator (on objects as well)</li>
        <li>Destructuring</li>
        <li>ES6 Classes (so you've seen them)</li>
      </ol>
    </section>

    <section>
      <h3>Ternary operator</h3>
      <p>Because writing "if" takes too long</p>
      <Code code={snippets["ternary.js"]} language="js" />
    </section>
    <section>
      <h3>Arrow functions</h3>
      <p>Because writing "function" takes too long</p>
      <Code code={snippets["arrowfunctions.js"]} language="js" />
    </section>

    <section>
      <h3><code>arrays + arrows &gt; awesome</code></h3>
      <Code code={snippets["arrowfunctionsforeach.js"]} language="js" />
      <p>
        React does not require us to use arrow functions, but most examples use
        them
      </p>
    </section>
    <section data-auto-animate>
      <Code
        dataId="arrowfunctions"
        code={snippets["arrowfunctionsStep1.js"]}
        stretch
      />
    </section>
    <section data-auto-animate>
      <Code
        dataId="arrowfunctions"
        code={snippets["arrowfunctionsStep2.js"]}
        stretch
      />
    </section>
    <section data-auto-animate>
      <Code
        dataId="arrowfunctions"
        code={snippets["arrowfunctionsStep3.js"]}
        stretch
      />
    </section>
    <section data-auto-animate>
      <Code
        dataId="arrowfunctions"
        code={snippets["arrowfunctionsStep4.js"]}
        stretch
      />
    </section>
    <section data-auto-animate>
      <Code
        dataId="arrowfunctions"
        code={snippets["arrowfunctionsStep5.js"]}
        stretch
      />
      <p>Not 100% the same, but....</p>
    </section>
    <section>
      <h3>Implicit return</h3>
      <p>If we omit the <code>{` { }`}</code> it returns something</p>
      <Code code={snippets["implicitreturn.js"]} language="js" />
    </section>
    <section>
      <h3>Array.prototype.map</h3>
      <p>
        A "new" JS method that let's us operate on an array and return a new one
      </p>
      <Code code={snippets["map.js"]} language="js" />
      <p>
        <small
          >It would also be really beneficial to learn <a
            href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter"
            >Array.filter</a
          >, <a
            href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort"
            >Array.sort</a
          >, <a
            href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/concat"
            >Array.concat</a
          > (and all the other cool Array methods)</small
        >
      </p>
    </section>
    <section>
      <h3>Spread operator</h3>
      <p>
        The spread operator <code>...</code> allows us to "expand an iterable"
      </p>
      <p>
        It's pretty confusing at first, but it has a multitude of uses you'll
        see used in React a lot
      </p>
    </section>
    <section>
      <h3>Spreading with arrays and strings</h3>
      <ol>
        <li class="fragment">
          Copying (simple) arrays, without reference
          <pre><code class="js">const ar1 = [1,2,3];
const copy = [...ar1]; // [1,2,3]</code></pre>
        </li>
        <li class="fragment">
          Splitting strings
          <pre><code class="js">const name="Jonas Holbech";
const asArray = [...name]; // ["J", "o", "n"]...</code></pre>
        </li>
      </ol>
    </section>

    <section>
      <h3>Spreading with arrays and strings</h3>
      <ol start="3">
        <li class="fragment">
          Concatenating arrays
          <pre><code class="js">const ar1 = [1,2,3];
const ar2 = [...ar1, 4, 5]; // [1,2,3,4,5]</code></pre>
        </li>
        <li class="fragment">
          Converting iterables to arrays
          <pre><code class="js">const asArray = [...document.querySelectorAll("p")]; 
// asArray is now a real array, 
// so we can use .map / .filter etc
</code></pre>
        </li>
      </ol>
    </section>
    <section>
      <h3>Spreading Objects</h3>
      <ol>
        <li class="fragment">
          Copying (simple) objects (without reference)
          <Code code={snippets["spreadCopyObject.js"]} language="js" />
        </li>
        <li class="fragment">
          Copying objects (without reference) and modifying
          <Code code={snippets["spreadCopyObject2.js"]} language="js" />
        </li>
      </ol>
    </section>
    <section>
      <h3>Destructuring Assignment</h3>
      <ul>
        <li>
          <a
            href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment"
            >MDN</a
          >
        </li>
        <li>
          <a
            href="https://dev.to/sarah_chima/destructuring-assignment---arrays-16f"
            >A bit simpler</a
          >
        </li>
      </ul>
      <p>Allows us to pick out properties from arrays and objects</p>
      <p>Really nice with objects, maybe less so with arrays</p>
    </section>
    <section>
      <h3>With objects</h3>
      <Code stretch code={snippets["destructuring-objects.js"]} language="js" />
    </section>
    <section>
      <h3>With arrays</h3>
      <Code stretch code={snippets["destructuring-arrays.js"]} language="js" />
    </section>
    <section>
      <h1>ES6 Classes</h1>
      <p>Just so you've seen them</p>
      <p>Older versions of React use these</p>
    </section>

    <section>
      <p>
        Simply put, a class is an object containing properties and methods
        (functions)
      </p>
      <p>These objects are "invoked" using "new"</p>
      <Code stretch code={snippets["class1.js"]} language="js" />
      <p>The constructor is a method that's automatically called</p>
    </section>
  </section>
  <section>
    <section>
      <h1>+3/4</h1>
    </section>
    <section>
      <ol>
        <li>
          Re-write the following if statements to use the ternary operator
        </li>
      </ol>
      <Code code={snippets["ex/ternary.js"]} language="js" />
    </section>
    <section>
      <ol start="2">
        <li>Re-write the following to arrow functions</li>
      </ol>
      <Code code={snippets["ex/arrowfunctions.js"]} language="js" />
    </section>
    <section>
      <ol start="3">
        <li>Re-write the following to arrow functions</li>
      </ol>
      <Code code={snippets["ex/arrowfunctionsForeach.js"]} language="js" />
    </section>
    <section>
      <ol start="4">
        <li>
          Re-write the following to use <code>map</code><br />Can you do
          implicit returns?
        </li>
      </ol>
      <Code code={snippets["ex/mapping.js"]} language="js" />
    </section>
    <section>
      <ol start="5">
        <li>Follow the instructions</li>
      </ol>
      <Code code={snippets["ex/spread-array.js"]} language="js" />
    </section>
    <section>
      <ol start="6">
        <li>Follow the instructions</li>
      </ol>
      <Code stretch code={snippets["ex/spread-object.js"]} language="js" />
    </section>
    <section>
      <ol start="7">
        <li>
          <a href="https://www.youtube.com/watch?v=UgEaJBz3bjY">Watch this</a>
        </li>
      </ol>
    </section>
    <section>
      <ol start="8">
        <li>Follow the instructions</li>
      </ol>
      <Code
        stretch
        code={snippets["ex/destructure-parameters.js"]}
        language="js"
      />
    </section>
    <section>
      <ol start="9">
        <li>Follow the instructions</li>
      </ol>
      <Code stretch code={snippets["ex/destructure-arrays.js"]} language="js" />
    </section>
  </section>
</SlideLayout>
